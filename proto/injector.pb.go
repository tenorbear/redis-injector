// Code generated by protoc-gen-go. DO NOT EDIT.
// source: injector.proto

package key_injection

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InjectRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjectRequest) Reset()         { *m = InjectRequest{} }
func (m *InjectRequest) String() string { return proto.CompactTextString(m) }
func (*InjectRequest) ProtoMessage()    {}
func (*InjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde8fb0ee3975dcf, []int{0}
}

func (m *InjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjectRequest.Unmarshal(m, b)
}
func (m *InjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjectRequest.Marshal(b, m, deterministic)
}
func (m *InjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectRequest.Merge(m, src)
}
func (m *InjectRequest) XXX_Size() int {
	return xxx_messageInfo_InjectRequest.Size(m)
}
func (m *InjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InjectRequest proto.InternalMessageInfo

func (m *InjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InjectRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The response message from keyval injection
type InjectReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjectReply) Reset()         { *m = InjectReply{} }
func (m *InjectReply) String() string { return proto.CompactTextString(m) }
func (*InjectReply) ProtoMessage()    {}
func (*InjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde8fb0ee3975dcf, []int{1}
}

func (m *InjectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjectReply.Unmarshal(m, b)
}
func (m *InjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjectReply.Marshal(b, m, deterministic)
}
func (m *InjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectReply.Merge(m, src)
}
func (m *InjectReply) XXX_Size() int {
	return xxx_messageInfo_InjectReply.Size(m)
}
func (m *InjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_InjectReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InjectRequest)(nil), "key_injection.InjectRequest")
	proto.RegisterType((*InjectReply)(nil), "key_injection.InjectReply")
}

func init() { proto.RegisterFile("injector.proto", fileDescriptor_dde8fb0ee3975dcf) }

var fileDescriptor_dde8fb0ee3975dcf = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0xcb, 0x4a,
	0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcd, 0x4e, 0xad, 0x8c,
	0x87, 0x88, 0x65, 0xe6, 0xe7, 0x29, 0x99, 0x73, 0xf1, 0x7a, 0x82, 0x39, 0x41, 0xa9, 0x85, 0xa5,
	0xa9, 0xc5, 0x25, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x20, 0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x13, 0x58, 0x0c,
	0xc2, 0x51, 0xe2, 0xe5, 0xe2, 0x86, 0x69, 0x2c, 0xc8, 0xa9, 0x34, 0x0a, 0xe6, 0xe2, 0xf6, 0x4e,
	0xad, 0xf4, 0x84, 0xda, 0x25, 0xe4, 0xc2, 0xc5, 0x06, 0x61, 0x0b, 0xc9, 0xe8, 0xa1, 0x58, 0xa8,
	0x87, 0x62, 0x9b, 0x94, 0x14, 0x0e, 0xd9, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x93,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xc8, 0xc9, 0x45, 0xc4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyInjectorClient is the client API for KeyInjector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyInjectorClient interface {
	// Inject a keyval pair to redis.
	Inject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectReply, error)
}

type keyInjectorClient struct {
	cc *grpc.ClientConn
}

func NewKeyInjectorClient(cc *grpc.ClientConn) KeyInjectorClient {
	return &keyInjectorClient{cc}
}

func (c *keyInjectorClient) Inject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectReply, error) {
	out := new(InjectReply)
	err := c.cc.Invoke(ctx, "/key_injection.KeyInjector/Inject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyInjectorServer is the server API for KeyInjector service.
type KeyInjectorServer interface {
	// Inject a keyval pair to redis.
	Inject(context.Context, *InjectRequest) (*InjectReply, error)
}

func RegisterKeyInjectorServer(s *grpc.Server, srv KeyInjectorServer) {
	s.RegisterService(&_KeyInjector_serviceDesc, srv)
}

func _KeyInjector_Inject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyInjectorServer).Inject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key_injection.KeyInjector/Inject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyInjectorServer).Inject(ctx, req.(*InjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyInjector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "key_injection.KeyInjector",
	HandlerType: (*KeyInjectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inject",
			Handler:    _KeyInjector_Inject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injector.proto",
}
